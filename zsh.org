#+TITLE: ZSH
#+PROPERTY: header-args:conf :comments link :tangle-mode (identity #o400) :mkdirp yes :tangle ~/.local/share/chezmoi/dot_zshrc.tmpl

Some time ago, I trashed my precious ZSH config and try to moved to /zinit/. As
I needed working version quickly, I used [[https://github.com/romkatv/zsh4humans][zsh4humans]] as base and tried to built
upon it. Long story short, zinit and zsh4humans ended up dead or slow/non
maintained.

So, once again, I moved to my own config, but started from scratch again. It
went fast this time as I already knew what I really use on daily basis.

I loved zsh4humans but there is one big upside of my own config. I'm no longer
trying to find where to turn off unwanted features, I'm instead looking for how
to get features I want. Which is really much easier.

* Install
Apart of obvious /zsh/, I also need /exa/ which I'm using instead of /ls/ and
/fzf/ for may completion features.

** Arch Linux
#+begin_src conf :tangle etc/yupfiles/zsh.yup
zsh latest noaur
exa latest noaur
fzf latest noaur
#+end_src

* Aliases
#+begin_src conf :tangle ~/.local/share/chezmoi/dot_aliases
alias j='z'

# ssh aliases
alias ssha='ssh -o ForwardAgent=yes'

# misc aliases
alias tree='tree -C -a -I .git'

# my ip
alias myip4='curl -4 ifconfig.co'
alias myip6='curl -6 ifconfig.co'
alias myip='myip4 ; myip6'

# systemd shortcuts
alias sc='sudo systemctl'
alias jc='sudo journalctl'
alias scu='systemctl --user'
alias jcu='journalctl --user'

# safe rm, cp etc
alias cp='cp -i'
# shellcheck disable=SC2032
alias rm='rm -i'
alias mv='mv -i'

# sane ls
alias ll='exa -l'
alias l='exa -l'
alias ls='exa'
alias la='exa -la'

# ask before quit in ncdu
alias ncdu='ncdu --confirm-quit'

# grep
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'

# sane df
alias df='df -h'

# chown links by default too
alias chown='chown -h'

# display weather
wttr() { curl -4 "http://wttr.in/$1"; }

undounzip(){
  [ -f "$1" ] && unzip -l "$1" | sed -e '1,/---/d' -e '/---/,$d' | awk 'BEGIN { OFS="" ; ORS="" } ; { for ( i=4; i<NF; i++ ) print $i " "; print $NF "\n" }' | xargs -I{} rm -r {}
}

# git
alias git='noglob git'
alias scp='noglob scp'
alias rsync='noglob rsync'

# adhoc aliasy pro různé drobnosti
alias dco=docker-compose
alias pc=podman-compose

# kvůli čtení dokumentace
alias help='bash -c help'

# ARCH linux aliasy
alias pacitude="pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'"
alias rename="file-rename"
#+end_src

And of course, load the aliases from =.zshrc=

#+begin_src conf
source ~/.aliases
#+end_src

* ZSH config
I like to have control over my configuration, but there are some limits. Mostly
I don't like to copy things I don't understand and discover how they work.

For long time I used [[https://grml.org/zsh/][Zsh config from grml]] with dozens of additions. Then tried
[[https://ohmyz.sh/][Oh My ZSH]], [[https://github.com/zsh-users/antigen][Antigen]] and others and finally rested for couple years with [[https://github.com/Tarrasch/antigen-hs][antigen-hs]].

Biggest problem for me is to move configuration to other machines, as I manage
many non-work devices with where my config was always behind or absent. If not
for this, I might probably try and stay with [[https://zdharma.org/zinit/wiki/INTRODUCTION/][Zinit]] but then I discovered [[https://github.com/romkatv/zsh4humans][Zsh for
humans]] and it looks like exact match for what I need.

** Options
Set up Zsh options. There are [[https://zsh.sourceforge.io/Doc/Release/Options.html][too many]] to go through all of them, but I took
time to copy/adjust short description for every option I'm using, so I know what
it is doing.

If a completion is performed with the cursor within a word, and a full
completion is inserted, the cursor is moved to the end of the word.

#+begin_src conf
setopt always_to_end
#+end_src

If a command is issued that can’t be executed as a normal command, and the
command is the name of a directory, perform the cd command to that directory.

#+begin_src conf
setopt auto_cd
#+end_src

Automatically use menu completion after the second consecutive request for
completion, for example by pressing the tab key repeatedly.

#+begin_src conf
setopt auto_menu
#+end_src

If a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.

#+begin_src conf
setopt auto_param_slash
#+end_src

#+begin_src conf
setopt auto_pushd
#+end_src

#+begin_src conf
setopt c_bases
#+end_src

#+begin_src conf
setopt extended_glob
#+end_src

#+begin_src conf
setopt interactive_comments
#+end_src

#+begin_src conf
setopt multios
#+end_src

#+begin_src conf
setopt no_auto_remove_slash
#+end_src

#+begin_src conf
setopt no_beep
#+end_src

#+begin_src conf
setopt no_bg_nice
#+end_src

#+begin_src conf
setopt no_bg_nice
#+end_src

#+begin_src conf
setopt no_flow_control
#+end_src

#+begin_src conf
setopt no_list_types
#+end_src

#+begin_src conf
setopt no_prompt_bang
#+end_src

#+begin_src conf
setopt no_prompt_subst
#+end_src

#+begin_src conf
setopt prompt_cr
#+end_src

#+begin_src conf
setopt prompt_percent
#+end_src

#+begin_src conf
setopt prompt_sp
#+end_src

#+begin_src conf
setopt typeset_silent
#+end_src


** Key bindings
I'm using Vi mode instead of default Emacs one.

#+begin_src conf
bindkey -v
#+end_src

It is also better to have faster switching between Vi modes

#+begin_src conf
export KEYTIMEOUT=1
#+end_src

=Alt+.= to insert/cycle last word is a must.

#+begin_src conf
bindkey '^[.' insert-last-word                        # alt+.   insert last word
#+end_src

And if you like it, also try =copy-earlier-word= binded to =Alt+m=. It get some
using to, but it is really convenient.

#+begin_src conf
autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey "^[m" copy-earlier-word
#+end_src

Event with Vi mode, I'm used to couple bindings from Emacs:

#+begin_src conf
bindkey '^A'  beginning-of-line
bindkey '^E'  end-of-line
#+end_src

*** Vim Mapping for Completion
When hitting =TAB= twice, I want to be able to navigate through completion
matches with classic Vim =hjkl= keys. Thanks [[https://unix.stackexchange.com/a/323282/58504][Sparhawk]] for snippet.

#+begin_src conf
zstyle ':completion:*' menu select

zmodload zsh/complist

bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
#+end_src

*** Editing Command Lines In Vim
When in normal mode, hit =v= to edit current command line in your ~$VISUAL~ (or
~$EDITOR~).

#+begin_src conf
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd e edit-command-line
#+end_src

** History handling
First think is "history sharing". I'm always using multiple terminals and I want
to immediately search history from all of them. But have local history (with
arrows) only from current one. So ideally:

1. store every command from every term to history
2. arrow up/down history is from single term, not from all of them
3. =Ctrl+R= shows history from all terms

#+begin_src conf
setopt no_share_history   # don't share history between all sessions
setopt append_history     # append to history
setopt inc_append_history # zsh sessions will append their history list to the history file rather than replace it
#+end_src

This makes 1. and 2. working but not 3. With =share_history=, we would have 1. and 3. working but not 2.

For now, I decided to modify [[https://github.com/joshskidmore/zsh-fzf-history-search][zsh-fzf-history-search]] to directly parse current
~$HISTFILE~ and display with =fzf= every time I use =Ctrl+R=. Probably not as
fast as using standard =fc= but working just as I want.

#+begin_src conf
# do nothing if fzf is not installed
(( ! $+commands[fzf] )) && return

# Bind for fzf history search
(( ! ${+ZSH_FZF_HISTORY_SEARCH_BIND} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_BIND='^r'

# Args for fzf
(( ! ${+ZSH_FZF_HISTORY_SEARCH_FZF_ARGS} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_FZF_ARGS='--no-sort --no-multi --exact --layout=reverse --height=25%'

# Extra args for fzf
(( ! ${+ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS=''

# Cursor to end-of-line
(( ! ${+ZSH_FZF_HISTORY_SEARCH_END_OF_LINE} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_END_OF_LINE=''

function kepi_fzf_history_search() {
  setopt extendedglob

  CANDIDATE_LEADING_FIELDS=1

  candidates=(${(f)"$(tac "$HISTFILE" | sed -r 's/^: [0-9]+:[0-9]+;//' | awk '!seen[$0]++' | fzf ${=ZSH_FZF_HISTORY_SEARCH_FZF_ARGS} ${=ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS} -q "$BUFFER")"})
  local ret=$?
  if [ -n "$candidates" ]; then
    BUFFER="${candidates[@]/(#m)*/${${(As: :)MATCH}[${CANDIDATE_LEADING_FIELDS},-1]}}"
    BUFFER="${BUFFER[@]/(#b)(?)\\n/$match[1]
}"
    zle vi-fetch-history -n $BUFFER
    if [ -n "${ZSH_FZF_HISTORY_SEARCH_END_OF_LINE}" ]; then
      zle end-of-line
    fi
  fi
  zle reset-prompt
  return $ret
}

autoload kepi_fzf_history_search
zle -N kepi_fzf_history_search

bindkey $ZSH_FZF_HISTORY_SEARCH_BIND kepi_fzf_history_search
#+end_src


I also want to have additional info present. Writes the history file in the
=:start:elapsed;command= format.

#+begin_src conf
setopt extended_history
#+end_src

Btw. =elapsed= will always store =0= as I'm using =inc_append_history= instead
of =inc_append_history_time=. First one stores command to history immediately
when you hit enter, but second one waits until command finishes. I don't usually
need /elapsed/ info, so I don't care.

Next thing is to cleanup history a little. No immediate dups, reduce blanks etc.
But, I intentionally want to store dups, just not display them. Same for
commands started with blanks.

I treat history as kind of audit log (not realiable tho), so not storing any dup
wouldn't work for me.

#+begin_src conf
setopt hist_no_store            # don't store history commands
setopt hist_reduce_blanks       # remove superfluous blanks from each command line being added to the history list.
setopt hist_expire_dups_first   # expires a duplicate event first when trimming history.
setopt hist_find_no_dups        # does not display a previously found event.
setopt hist_ignore_dups         # does not record an event that was just recorded again.
setopt no_hist_beep             # don't beep when accessing non-existent history.
#+end_src

And last, but not least, *never* execute immediately after history expansion.

#+begin_src conf
setopt hist_verify
#+end_src

#+begin_src conf
HISTFILE=~/.zsh_history
HISTSIZE=1000000000
SAVEHIST=1000000000
#+end_src

** Completions
We need to enable ZSH completions of course.

#+begin_src conf
autoload -Uz compinit
compinit
#+end_src

Set completers - just trying out recommends from [[https://thevaluable.dev/zsh-completion-guide-examples/][A Guide to the Zsh Completion with Examples]].

#+begin_src conf
zstyle ':completion:*' completer _extensions _complete _approximate
#+end_src

Squeeze the slashes! No more // by accident

#+begin_src conf
zstyle ':completion:*' squeeze-slashes true
#+end_src



Add some caching

#+begin_src conf
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/.zcompcache"
#+end_src

** Environment variables
#+begin_src conf
GEM_PATH=~/.gem
_JAVA_AWT_WM_NONREPARENTING=1

TERMINAL=/usr/bin/termite

EDITOR={{ .editor }}
VISUAL={{ .editor }}

DEBFULLNAME={{ .name }}
DEBEMAIL={{ .email }}

# opt-out from dotnet telemetry
DOTNET_CLI_TELEMETRY_OPTOUT=1

# set QT on wayland
{{- if eq .xdg_session_type "wayland" }}
QT_QPA_PLATFORM=wayland
{{- end }}

# qt5ct see https://wiki.archlinux.org/index.php/Qt#Configuration_of_Qt5_apps_under_environments_other_than_KDE_Plasma
QT_QPA_PLATFORMTHEME=qt5ct

export EDITOR GPG_TTY

# for Alacritty
export WINIT_X11_SCALE_FACTOR=1
#+end_src

** Path
#+begin_src conf
PATH=$HOME/bin:$HOME/.local/bin:$HOME/.yarn/bin:$HOME/.pyenv/bin:$HOME/.poetry/bin:$HOME/.emacs.d/bin:$PATH
export PATH
#+end_src

** Pasting
When pasting something to terminal, mainly from browser, most of the time it
is with trailing newline.

Fortunately, in ZSH >= 5.1, [[https://cirw.in/blog/bracketed-paste][bracketed paste]] is on by default, so commands don't
get executed until you hit Enter, no matter if they have newline at the end.
This makes possible hidden attacks less dangerous. But newline is still at least
ugly and inconvenient to work with (ugly history, backspacing, moving to another
line etc).

It took me only some 5 years to realize that maybe trailing newline can be
removed automatically in ZSH? 1 minute later I found [[https://unix.stackexchange.com/a/693146/58504][this handy zle widget]] which
does exactly that:

#+begin_src conf
bracketed-paste() {
  zle .$WIDGET && LBUFFER=${LBUFFER%$'\n'}
}
zle -N bracketed-paste
#+end_src

** Antidote
Instead of /Zinit/, I switched to [[https://getantidote.github.io][Antidote]]. It is fast, kind of easy and more
transparent.

And funny enough, I also made (almost) full circle. In my previous complex
configuration I had been using [[https://github.com/zsh-users/antigen][Antigen]]. And than, quickly enough, I switched to
faster [[https://github.com/Tarrasch/antigen-hs][antigen-hs]]. Meanwhile there had been new player - [[https://getantibody.github.io/][Antibody]].
Unfortunately, it has been discontinued last year. Fortunately [[https://github.com/mattmc3][mattmc3]] came with
[[https://getantidote.github.io][Antidote]], most recent /antigen-compatible/ Zsh plugin manager.

#+begin_src conf
# clone antidote if necessary
[[ -e ~/.antidote ]] || git clone https://github.com/mattmc3/antidote.git ~/.antidote

# source antidote
. ~/.antidote/antidote.zsh

# set friendly names
zstyle ':antidote:bundle' use-friendly-names 'yes'

# generate and source plugins from ~/.zsh_plugins.txt
antidote load
#+end_src

*** Plugins
:PROPERTIES:
:header-args:conf: :tangle ~/.local/share/chezmoi/dot_zsh_plugins.txt
:END:
**** Lazyload
Small plugin allowing to lazy load some libraries when command is typed.

#+begin_src conf
qoomon/zsh-lazyload
#+end_src

**** Prompt
Add to ZSH plugins:
#+begin_src conf
sindresorhus/pure kind:fpath
#romkatv/powerlevel10k kind:fpath
#+end_src

Init prompt

#+begin_src conf :tangle ~/.local/share/chezmoi/dot_zshrc.tmpl
autoload -Uz promptinit && promptinit && prompt pure
#+end_src

**** History Search :ARCHIVE:
I like to use /fzf/ for history searches, and first plugin I found is:

#+begin_src conf
joshskidmore/zsh-fzf-history-search kind:defer
#+end_src

FZF has to be already present in your system.

**** z - jump arround
[[https://github.com/agkozak/zsh-z][zsh-z]] is really convenient way to quickly jump to directories you
once visited. I have alias set up to =j= (as /jump/).

If you type =j= only, it will print path history. If you type =j <part_of_path>=
then you /cd/ into the match based on [[https://en.wikipedia.org/wiki/Frecency][frecency]].

#+begin_src conf
agkozak/zsh-z
#+end_src

**** zsh-autosuggestions
Fish-like fast/unobtrusive autosuggestions for zsh.

Since I discovered fish-like /autosugestions/ I kind of get used to them. I'm
using default behaviour to accept full match with =→=.

#+begin_src conf
zsh-users/zsh-autosuggestions kind:defer
#+end_src

**** More completions
never hurts...

#+begin_src conf
zsh-users/zsh-completions kind:defer
#+end_src

**** zsh-syntax-highlighting
Why would only editors provide syntax highlighting? I'm often writing one-liners
in shell. Let's do it with style.

#+begin_src conf
zsh-users/zsh-syntax-highlighting kind:defer
#+end_src

**** TODO zsh-abbr - auto expanding abbreviations
[[https://github.com/olets/zsh-abbr][abbr]] is the zsh manager for auto-expanding abbreviations - text that when
written in a terminal is replaced with other (typically longer) text. Inspired
by fish shell.

I'm not sure I want this but lets try...

#+begin_src conf
olets/zsh-abbr kind:defer
#+end_src

**** Colored man pages
IMHO more people would RTFM if colored by default...

#+begin_src conf
ohmyzsh/ohmyzsh path:plugins/colored-man-pages kind:defer
#+end_src


**** zsh-history-substring-search
Clean-room implementation of the Fish shell's history search feature, where you
can type in any part of any command from history and then press chosen keys,
such as the UP and DOWN arrows, to cycle through matches.

#+begin_src conf
zsh-users/zsh-history-substring-search kind:defer
#+end_src

**** pyenv
#+begin_src conf
davidparsson/zsh-pyenv-lazy
#+end_src

*** NVM - Node Version Manager :ARCHIVE:
#+begin_src conf
NVM_SYMLINK_CURRENT="true" # nvm use should make a symlink
NVM_DIR="$HOME/.nvm"
lazyload nvm node nodejs gatsby yarn npm npx -- 'source "$NVM_DIR/nvm.sh"'
#+end_src
*** Nodenv - Node version manager
I recently switched from NVM to *Nodenv*, as I like idea of shims as I'm used to them from *Rbenv*.

#+begin_src conf
lazyload nvm node gatsby yarn npm npx tsc -- 'eval "$(nodenv init -)"'
#+end_src

*** Rbenv - Ruby version manager
#+begin_src conf
RBENV_ROOT="$HOME/.rbenv"
lazyload ruby rbenv gem bundle -- 'eval "$($HOME/.rbenv/bin/rbenv init --no-rehash - zsh)"'
#+end_src

or just use [[github:ELLIOTTCABLE/rbenv.plugin.zsh]]

* Using on different user@server
I'm using many app users on different servers, when I want same ZSH config, it should be enough to do something like:

#+begin_src sh
scp .zshrc .zsh_plugins.txt user@server:
#+end_src

Remote server should have fzf installed. fzf installation could be added to
config too, but I don't have it for now.
