#+TITLE: ZSH
#+PROPERTY: header-args:conf :comments link :tangle-mode (identity #o400) :mkdirp yes :tangle ~/.local/share/chezmoi/dot_zshrc

I recently trashed my precious ZSH config and I'm trying to build new one with
/zinit/. I needed working version quickly so I used [[https://github.com/romkatv/zsh4humans][zsh4humans]] as base and I'm
building slowly (very) upon it.

* TODO Split, comment atc
- [ ] split into parts
- [ ] add more documentation about specific features

* Install
** TODO Arch Linux
#+begin_src conf :tangle etc/yupfiles/zsh.yup
zsh latest noaur
exa latest noaur
#+end_src

* Aliases
#+begin_src conf :tangle ~/.local/share/chezmoi/dot_aliases
alias j='z'

# ssh aliases
alias ssha='ssh -o ForwardAgent=yes'

# misc aliases
alias tree='tree -C'

# my ip
alias myip4='curl -4 ifconfig.co'
alias myip6='curl -6 ifconfig.co'
alias myip='myip4 ; myip6'

# systemd shortcuts
alias sc='sudo systemctl'
alias jc='sudo journalctl'
alias scu='systemctl --user'
alias jcu='journalctl --user'

# safe rm, cp etc
alias cp='cp -i'
# shellcheck disable=SC2032
alias rm='rm -i'
alias mv='mv -i'

# sane ls
alias ll='exa -l'
alias l='exa -l'
alias ls='exa'
alias la='exa -la'

# ask before quit in ncdu
alias ncdu='ncdu --confirm-quit'

# grep
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'

# sane df
alias df='df -h'

# chown links by default too
alias chown='chown -h'

alias docker=podman

pocasi() { curl -4 "http://wttr.in/$1"; }

undounzip(){
  [ -f "$1" ] && unzip -l "$1" | sed -e '1,/---/d' -e '/---/,$d' | awk 'BEGIN { OFS="" ; ORS="" } ; { for ( i=4; i<NF; i++ ) print $i " "; print $NF "\n" }' | xargs -I{} rm -r {}
}


# ansible
alias ansible='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} ansible'
alias kinit-ansible='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} kinit ansible'
alias klist-ansible='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} klist'
alias kdestroy-ansible='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} kdestroy'
alias ssh-ansible='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} ssh -l ansible'
alias ansible-playbook='KRB5CCNAME=FILE:/tmp/krb5cc_ansible_%{uid} ansible-playbook'

# git
alias git='noglob git'
alias scp='noglob scp'
alias rsync='noglob rsync'

# alias rbenv & co
alias rbenv-init='export PATH="$HOME/.rbenv/bin:$PATH"; eval "$(rbenv init -)"; source ~/.rbenv/completions/rbenv.zsh'
alias rvm-init='export PATH="$PATH:~/.rvm/bin"; source ~/.rvm/scripts/rvm;'
# alias node-init='source ~/.nvm/nvm.sh;'

# adhoc aliasy pro různé drobnosti
alias dco=docker-compose
alias xrs='xrasengan'

# kvůli čtení dokumentace
alias help='bash -c help'

# ARCH linux aliasy
alias pacitude="pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'"
alias rename="file-rename"
#+end_src

* Environment variables
#+begin_src conf :tangle ~/.local/share/chezmoi/dot_zshenv.tmpl
# shellcheck disable=SC2034

PATH=~/bin:~/.local/bin:~/.nvm/versions/node/default/bin:~/.yarn/bin:~/.pyenv/bin:~/.poetry/bin:$PATH

GEM_PATH=~/.gem
_JAVA_AWT_WM_NONREPARENTING=1

TERMINAL=/usr/bin/termite

EDITOR={{ .editor }}
VISUAL={{ .editor }}

DEBFULLNAME={{ .name }}
DEBEMAIL={{ .email }}

# opt-out from dotnet telemetry
DOTNET_CLI_TELEMETRY_OPTOUT=1

# set QT on wayland
{{- if eq .xdg_session_type "wayland" }}
QT_QPA_PLATFORM=wayland
{{- end }}

# qt5ct see https://wiki.archlinux.org/index.php/Qt#Configuration_of_Qt5_apps_under_environments_other_than_KDE_Plasma
QT_QPA_PLATFORMTHEME=qt5ct

export PATH EDITOR
#+end_src

** TODO check if used?

* p10k config
I tried [[https://github.com/romkatv/powerlevel10k][p10k]] instead of pure [[https://github.com/sindresorhus/pure][pure]] :) and it is working great so far. You can
easily change options with ~p10k configure~ to suite your taste.

#+begin_src conf :tangle ~/.local/share/chezmoi/dot_p10k.zsh
# Temporarily change options.
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
  emulate -L zsh

  # Unset all configuration options.
  unset -m 'POWERLEVEL9K_*'

  # Zsh >= 5.1 is required.
  autoload -Uz is-at-least && is-at-least 5.1 || return

  # Prompt colors.
  local grey='242'
  local red='1'
  local yellow='3'
  local blue='4'
  local magenta='5'
  local cyan='6'
  local white='7'

  # Left prompt segments.
  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    context                   # user@host
    dir                       # current directory
    vcs                       # git status
    command_execution_time    # previous command duration
    virtualenv                # python virtual environment
    prompt_char               # prompt symbol
  )

  # Right prompt segments.
  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
    # command_execution_time  # previous command duration
    # virtualenv              # python virtual environment
    # context                 # user@host
    # time                    # current time
  )

  # Basic style options that define the overall prompt look.
  typeset -g POWERLEVEL9K_BACKGROUND=                            # transparent background
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_{LEFT,RIGHT}_WHITESPACE=  # no surrounding whitespace
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SUBSEGMENT_SEPARATOR=' '  # separate segments with a space
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SEGMENT_SEPARATOR=        # no end-of-line symbol
  typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION=           # no segment icons

  # Add an empty line before each prompt except the first. This doesn't emulate the bug
  # in Pure that makes prompt drift down whenever you use the Alt-C binding from fzf or similar.
  typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=false

  # Magenta prompt symbol if the last command succeeded.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS}_FOREGROUND=$magenta
  # Red prompt symbol if the last command failed.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS}_FOREGROUND=$red
  # Default prompt symbol.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
  # Prompt symbol in command vi mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
  # Prompt symbol in visual vi mode is the same as in command mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='❮'
  # Prompt symbol in overwrite vi mode is the same as in command mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=false

  # Grey Python Virtual Environment.
  typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=$grey
  # Don't show Python version.
  typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
  typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=

  # Blue current directory.
  typeset -g POWERLEVEL9K_DIR_FOREGROUND=$blue

  # Context format when root: user@host. The first part white, the rest grey.
  typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE="%F{$white}%n%f%F{$grey}@%m%f"
  # Context format when not root: user@host. The whole thing grey.
  typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE="%F{$grey}%n@%m%f"
  # Don't show context unless root or in SSH.
  typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_CONTENT_EXPANSION=

  # Show previous command duration only if it's >= 5s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=5
  # Don't show fractional seconds. Thus, 7s rather than 7.3s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
  # Duration format: 1d 2h 3m 4s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
  # Yellow previous command duration.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=$yellow

  # Grey Git prompt. This makes stale prompts indistinguishable from up-to-date ones.
  typeset -g POWERLEVEL9K_VCS_FOREGROUND=$grey

  # Disable async loading indicator to make directories that aren't Git repositories
  # indistinguishable from large Git repositories without known state.
  typeset -g POWERLEVEL9K_VCS_LOADING_TEXT=

  # Don't wait for Git status even for a millisecond, so that prompt always updates
  # asynchronously when Git state changes.
  typeset -g POWERLEVEL9K_VCS_MAX_SYNC_LATENCY_SECONDS=0

  # Cyan ahead/behind arrows.
  typeset -g POWERLEVEL9K_VCS_{INCOMING,OUTGOING}_CHANGESFORMAT_FOREGROUND=$cyan
  # Don't show remote branch, current tag or stashes.
  typeset -g POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind)
  # Don't show the branch icon.
  typeset -g POWERLEVEL9K_VCS_BRANCH_ICON=
  # When in detached HEAD state, show @commit where branch normally goes.
  typeset -g POWERLEVEL9K_VCS_COMMIT_ICON='@'
  # Don't show staged, unstaged, untracked indicators.
  typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED}_ICON=
  # Show '*' when there are staged, unstaged or untracked files.
  typeset -g POWERLEVEL9K_VCS_DIRTY_ICON='*'
  # Show '⇣' if local branch is behind remote.
  typeset -g POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON=':⇣'
  # Show '⇡' if local branch is ahead of remote.
  typeset -g POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON=':⇡'
  # Don't show the number of commits next to the ahead/behind arrows.
  typeset -g POWERLEVEL9K_VCS_{COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=1
  # Remove space between '⇣' and '⇡' and all trailing spaces.
  typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${${${P9K_CONTENT/⇣* :⇡/⇣⇡}// }//:/ }'

  # Grey current time.
  typeset -g POWERLEVEL9K_TIME_FOREGROUND=$grey
  # Format for the current time: 09:51:02. See `man 3 strftime`.
  typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
  # If set to true, time will update when you hit enter. This way prompts for the past
  # commands will contain the start times of their commands rather than the end times of
  # their preceding commands.
  typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false

  # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
  # when accepting a command line. Supported values:
  #
  #   - off:      Don't change prompt when accepting a command line.
  #   - always:   Trim down prompt when accepting a command line.
  #   - same-dir: Trim down prompt when accepting a command line unless this is the first command
  #               typed after changing current working directory.
  typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always

  # Instant prompt mode.
  #
  #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found
  #              it incompatible with your zsh configuration files.
  #   - quiet:   Enable instant prompt and don't print warnings when detecting console output
  #              during zsh initialization. Choose this if you've read and understood
  #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
  #   - verbose: Enable instant prompt and print a warning when detecting console output during
  #              zsh initialization. Choose this if you've never tried instant prompt, haven't
  #              seen the warning, or if you are unsure what this all means.
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=verbose

  # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
  # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload
  # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you
  # really need it.
  typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

  # If p10k is already loaded, reload configuration.
  # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
  (( ! $+functions[p10k] )) || p10k reload
}

(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
'builtin' 'unset' 'p10k_config_opts'
#+end_src
* ZSH config
#+begin_src conf
# # napovídání doplnění ala fish (zašedlá část příkazu)
# zinit light zsh-users/zsh-autosuggestions

# zinit light zsh-users/zsh-syntax-highlighting
# #zinit light zdharma/fast-syntax-highlighting
# zinit light zsh-users/zsh-history-substring-search

# zinit ice depth=1; zinit light romkatv/powerlevel10k

# zinit ice blockf
# zinit light zsh-users/zsh-completions

# # jump around - aliased as j
# zinit light rupa/z
#+end_src

I like to have control over my configuration, but there are some limits. Mostly
I don't like to copy things I don't understand and discover how they work.

For long time I used [[https://grml.org/zsh/][Zsh config from grml]] with dozens of additions. Then tried
[[https://ohmyz.sh/][Oh My ZSH]], [[https://github.com/zsh-users/antigen][Antigen]] and others and finally rested for couple years with[[https://github.com/Tarrasch/antigen-hs][
antigen-hs]].

Biggest problem for me is to move configuration to other machines, as I manage
many non-work devices with where my config was always behind or absent. If not
for this, I might probably try and stay with [[https://zdharma.org/zinit/wiki/INTRODUCTION/][Zinit]] but then I discovered [[https://github.com/romkatv/zsh4humans][Zsh for
humans]] and it looks like exact match for what I need.

** Zsh for Humans (Z4H)
Some of [[https://github.com/romkatv/zsh4humans][Zsh for Humans]] important features:

- Autodownload its configs and utilities.
- Completion with =TAB= with /fzf./ You can mark multiple candidates with =Ctrl+Space=.
- SSH hosts auto completed from known hosts
- Remote paths for SCP autocompleted over /fzf/ too when you have keys enabled.


*** Basic Z4H init
#+begin_src conf
# Export XDG environment variables. Other environment variables are exported later.
export XDG_CACHE_HOME="$HOME/.cache"

# URL of zsh4humans repository. Used during initial installation and updates.
Z4H_URL="https://raw.githubusercontent.com/romkatv/zsh4humans/v2"

# Cache directory. Gets recreated if deleted. If already set, must not be changed.
: "${Z4H:=${XDG_CACHE_HOME:-$HOME/.cache}/zsh4humans}"

# Do not create world-writable files by default.
umask o-w

# Fetch z4h.zsh if it doesn't exist yet.
if [ ! -e "$Z4H"/z4h.zsh ]; then
  mkdir -p -- "$Z4H" || return
  >&2 printf '\033[33mz4h\033[0m: fetching \033[4mz4h.zsh\033[0m\n'
  if command -v curl >/dev/null 2>&1; then
    curl -fsSL -- "$Z4H_URL"/z4h.zsh >"$Z4H"/z4h.zsh.$$ || return
  else
    wget -O-   -- "$Z4H_URL"/z4h.zsh >"$Z4H"/z4h.zsh.$$ || return
  fi
  mv -- "$Z4H"/z4h.zsh.$$ "$Z4H"/z4h.zsh || return
fi

# Code prior to this line should not assume the current shell is Zsh.
# Afterwards we are in Zsh.
. "$Z4H"/z4h.zsh || return

#+end_src

#+begin_src conf
# 'ask': ask to update; 'no': disable auto-update.
zstyle ':z4h:' auto-update                     ask
# Auto-update this often; has no effect if auto-update is 'no'.
zstyle ':z4h:'                auto-update-days 28
# Stability vs freshness of plugins: stable, testing or dev.
zstyle ':z4h:*'               channel          stable
# Bind alt-arrows or ctrl-arrows to change current directory?
# The other key modifier will be bound to cursor movement by words.
zstyle ':z4h:'                cd-key           alt
#+end_src

*** Autosuggestions
Since I discovered fish-like /autosugestions/ I kind of get used to them. /zsh4h's/
default behaviour is to accept only one character from autosuggestion with =→=,
but we can easily change it to full match.

Btw. =Alt-M= is interesting as well as it accept whole suggestion but don't move
cursor to the end. *Remember* that you can press =Enter= anywhere in command line to
send command, so this can be pretty nice.

#+begin_src conf
# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char     accept
#+end_src

*** Change login shell
#+begin_src conf
if (( UID && UID == EUID && ! Z4H_SSH )); then
  # When logged in as a regular user and not via `z4h ssh`, check that
  # login shell is zsh and offer to change it if it isn't.
  z4h chsh
fi
#+end_src

*** Additional Git repositories
Clone additional Git repositories from GitHub. This doesn't do anything apart
from cloning the repository and keeping it up-to-date. Cloned files can be used
after ~z4h init~.

**** Zinit                                                         :zinit:
I'm currently using /zinit/ for couple settings. It might be better to move
everything directly to /z4h/... maybe later.

#+begin_src conf
z4h install zdharma/zinit
#+end_src

*** Z4H init
Install or update core components (fzf, zsh-autosuggestions, etc.) and
initialize Zsh. After this point console I/O is unavailable. Everything that
requires user interaction or can perform network I/O must be done above.
Everything else is best done below.

#+begin_src conf
z4h init || return
#+end_src

*** Emacs or Vi keymap
#+begin_src conf
# Enable emacs (-e) or vi (-v) keymap.
bindkey -v
#+end_src

**** TODO Keys!!!
#+begin_src conf
bindkey '^[h' z4h-cd-back                             # alt+h   cd into the prev directory
bindkey '^[l' z4h-cd-forward                          # alt+l   cd into the next directory
bindkey '^[k' z4h-cd-up                               # alt+k   cd ..

bindkey '^A'  beginning-of-line                       # ctrl+a  go to the beginning of line
bindkey '^E'  end-of-line                             # ctrl+e  go to the end of line

bindkey '^[.' insert-last-word                        # alt+.   insert last word

bindkey '^[H' z4h-run-help                            # alt+H      help for the cmd at cursor

# intereseting - but should be different letters in vim mode
#bindkey '^K'      kill-line                               # ctrl+k     delete line after cursor
#bindkey '^J'      backward-kill-line                      # ctrl+j     delete line before cursor
#bindkey '^N'      kill-buffer                             # ctrl+n     delete all lines
#+end_src

#+begin_src conf
# # If NumLock is off, translate keys to make them appear the same as with NumLock on.
# bindkey -s '^[OM' '^M'  # enter
# bindkey -s '^[Ok' '+'
# bindkey -s '^[Om' '-'
# bindkey -s '^[Oj' '*'
# bindkey -s '^[Oo' '/'
# bindkey -s '^[OX' '='

# # If someone switches our terminal to application mode (smkx), translate keys to make
# # them appear the same as in raw mode (rmkx).
# bindkey -s '^[OH' '^[[H'  # home
# bindkey -s '^[OF' '^[[F'  # end
# bindkey -s '^[OA' '^[[A'  # up
# bindkey -s '^[OB' '^[[B'  # down
# bindkey -s '^[OD' '^[[D'  # left
# bindkey -s '^[OC' '^[[C'  # right

# # TTY sends different key codes. Translate them to regular.
# bindkey -s '^[[1~' '^[[H'  # home
# bindkey -s '^[[4~' '^[[F'  # end

# # Do nothing on pageup and pagedown. Better than printing '~'.
# bindkey -s '^[[5~' ''
# bindkey -s '^[[6~' ''

# bindkey '^[[A'    z4h-up-line-or-beginning-search-local   # up         prev command in local history
# bindkey '^[[B'    z4h-down-line-or-beginning-search-local # down       next command in local history
# bindkey '^[[1;5A' up-line-or-beginning-search             # ctrl+up    prev cmd in global history
# bindkey '^[[1;5B' down-line-or-beginning-search           # ctrl+down  next cmd in global history
#+end_src
*** Environment variables
#+begin_src conf
# Export environment variables.
export GPG_TTY=$TTY
#+end_src

*** Path
#+begin_src conf
# Extend PATH.
path=(~/bin $path)
#+end_src

*** Source plugins from additional repositories
Use additional Git repositories pulled in with `z4h install`.

**** Zinit init                                                    :zinit:
#+begin_src conf
z4h source $Z4H/zdharma/zinit/zinit.zsh
#+end_src

**** Examples
Some examples from z4h sources about how to use sources and modify path:

#+begin_example
z4h source $Z4H/ohmyzsh/ohmyzsh/lib/diagnostics.zsh
z4h source $Z4H/ohmyzsh/ohmyzsh/plugins/emoji-clock/emoji-clock.plugin.zsh
fpath+=($Z4H/ohmyzsh/ohmyzsh/plugins/supervisor)
#+end_example

*** iTerm2 fix
#+begin_src conf
# Source additional local files.
if [[ $LC_TERMINAL == iTerm2 ]]; then
  # Enable iTerm2 shell integration (if installed).
  z4h source ~/.iterm2_shell_integration.zsh
fi
#+end_src

*** Key bindings
#+begin_src conf
# Define key bindings.
bindkey -M emacs '^H' backward-kill-word # Ctrl-H and Ctrl-Backspace: Delete previous word.
#+end_src

*** Completion sort
#+begin_src conf
# Sort completion candidates when pressing Tab?
zstyle ':completion:*'                           sort               false
#+end_src

*** Cursor move after command history
This one seemed interesting to me as it is often great to have cursor at the
beginning of the line, instead of the end. Anyway trying it for couple of weeks
I had to switch to end of line again as it is much better for my style of work.

#+begin_src conf
# Should cursor go to the end when Up/Down/Ctrl-Up/Ctrl-Down fetches a command from history?
zstyle ':zle:(up|down)-line-or-beginning-search' leave-cursor       yes
#+end_src

*** TODO Tab completion
When presented with the list of choices upon hitting Tab, accept selection and
trigger another completion with this key binding. Great for completing file paths.

Personally I don't like this behavior as I often want to wark in some parent
directory, which is really hard to enter in this style.

#+begin_src conf
#zstyle ':fzf-tab:*'                              continuous-trigger tab
#+end_src

*** Autoload functions
#+begin_src conf
# Autoload functions.
autoload -Uz zmv

# Define functions and completions.
function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md
#+end_src

*** Aliases
#+begin_src conf
# Define aliases.
alias tree='tree -a -I .git'
# Add flags to existing aliases.
alias ls="${aliases[ls]:-ls} -A"

source ~/.aliases

#+end_src

*** Shell Options
#+begin_src conf
# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt glob_dots  # glob matches files starting with dot; `ls *` becomes equivalent to `ls *(D)`
#+end_src

*** rbenv                                                           :zinit:
#+begin_src conf
path=($HOME/.rbenv/bin(N-/) $path)
zinit ice wait"0" lucid has"rbenv"
zinit light htlsne/zinit-rbenv
#+end_src

*** nvm                                                             :zinit:
#+begin_src conf
NVM_SYMLINK_CURRENT="true" # nvm use should make a symlink
NVM_DIR="$HOME/.nvm"
NVM_LAZY_LOAD=true
zinit light lukechilds/zsh-nvm # This load nvm on first use of node, npm, etc
#+end_src

*** z - jump arround
[[https://github.com/agkozak/zsh-z][zsh-z]] is really convenient way to quickly jump to directories you
once visited. I have alias set up to =j= (as /jump/).

If you type =j= only, it will print path history. If you type =j <part_of_path>=
then you /cd/ into the match based on [[https://en.wikipedia.org/wiki/Frecency][frecency]].

#+begin_src conf
# jump around - aliased as j
zinit light agkozak/zsh-z
#+end_src

I previously used its predecessor [[https://github.com/rupa/z][rupa/z]] and alternatives like /j/.

*** experiment
#+begin_src conf
# give a preview of commandline arguments when completing `kill`
# zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
# zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap

# # (experimental, may change in the future)
# # some boilerplate code to define the variable `extract` which will be used later
# # please remember to copy them
# local extract="
# # trim input(what you select)
# local in=\${\${\"\$(<{f})\"%\$'\0'*}#*\$'\0'}
# # get ctxt for current completion(some thing before or after the current word)
# local -A ctxt=(\"\${(@ps:\2:)CTXT}\")
# # real path
# local realpath=\${ctxt[IPREFIX]}\${ctxt[hpre]}\$in
# realpath=\${(Qe)~realpath}
# "
# # give a preview of directory by exa when completing cd
# zstyle ':fzf-tab:complete:cd:*' extra-opts --preview=$extract'exa -1 --color=always $realpath'
#+end_src
