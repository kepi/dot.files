#+TITLE: Qutebrowser
#+PROPERTY: header-args:python :comments link :tangle-mode (identity #o600) :mkdirp yes :tangle ~/.local/share/chezmoi/private_dot_config/qutebrowser/config.py.tmpl

* Install
** Arch Linux
#+begin_src conf :tangle etc/yupfiles/qutebrowser.yup
qutebrowser-git latest aur
#+end_src

* Config
Documentation:
- qute://help/configuring.html
- qute://help/settings.html
 
#+begin_src python
## This is here so configs done via the GUI are still loaded.
## Remove it to not load settings done via the GUI.
config.load_autoconfig()

c.auto_save.session = True
config.source(
    "base16-solarized-dark.config.py"
)
#+end_src

Turn off fokin autoplay

#+begin_src python
c.content.autoplay = False
#+end_src

Dark scheme everywhere we could.

#+begin_src python
## Force `prefers-color-scheme: dark` colors for websites.
## Type: Bool
c.colors.webpage.preferred_color_scheme = 'dark'

## Default encoding to use for websites. The encoding must be a string
## describing an encoding such as _utf-8_, _iso-8859-1_, etc.
## Type: String
c.content.default_encoding = 'utf-8'

## Value to send in the `Accept-Language` header. Note that the value
## read from JavaScript is always the global value.
## Type: String
# c.content.headers.accept_language = 'en-US,en;q=0.9'
c.content.headers.accept_language = 'cs-CZ, cs'

## Directory to save downloads to. If unset, a sensible OS-specific
## default is used.
## Type: Directory
c.downloads.location.directory = "~/tmpfs"

## Editor (and arguments) to use for the `open-editor` command. The
## following placeholders are defined:  * `{file}`: Filename of the file
## to be edited. * `{line}`: Line in which the caret is found in the
## text. * `{column}`: Column in which the caret is found in the text. *
## `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
## Same as `{column}`, but starting from index 0.
## Type: ShellCommand
# c.editor.command = ['gvim', '-f', '{file}', '-c', 'normal {line}G{column0}l']
c.editor.command = ['{{ .editor }}', '+{line}', '{file}']

## CSS selectors used to determine which elements on a page should have
## hints.
## Type: Dict
c.hints.selectors = {
    "all": [
        "a",
        "area",
        "textarea",
        "select",
        'input:not([type="hidden"])',
        "button",
        "frame",
        "iframe",
        "img",
        "link",
        "summary",
        "[onclick]",
        "[onmousedown]",
        '[role="link"]',
        '[role="option"]',
        '[role="button"]',
        "[ng-click]",
        "[ngClick]",
        "[data-ng-click]",
        "[x-ng-click]",
        "[tabindex]",
    ],
    "links": ["a[href]", "area[href]", "link[href]", '[role="link"][href]'],
    "images": ["img"],
    "media": ["audio", "img", "video"],
    "url": ["[src]", "[href]"],
    "inputs": [
        'input[type="text"]',
        'input[type="date"]',
        'input[type="datetime-local"]',
        'input[type="email"]',
        'input[type="month"]',
        'input[type="number"]',
        'input[type="password"]',
        'input[type="search"]',
        'input[type="tel"]',
        'input[type="time"]',
        'input[type="url"]',
        'input[type="week"]',
        "input:not([type])",
        "textarea",
    ],
    "tickets": [
        '.subject a[href*="/issues/1"]',
        '.subject a[href*="/issues/2"]',
        '.subject a[href*="/issues/3"]',
        '.subject a[href*="/issues/4"]',
        '.subject a[href*="/issues/5"]',
        '.subject a[href*="/issues/6"]',
        '.subject a[href*="/issues/7"]',
        '.subject a[href*="/issues/8"]',
        '.subject a[href*="/issues/9"]',
    ],
}

## How to open links in an existing instance if a new one is launched.
## This happens when e.g. opening a link from a terminal. See
## `new_instance_open_target_window` to customize in which window the
## link is opened in.
## Type: String
## Valid values:
##   - tab: Open a new tab in the existing window and activate the window.
##   - tab-bg: Open a new background tab in the existing window and activate the window.
##   - tab-silent: Open a new tab in the existing window without activating the window.
##   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
##   - window: Open in a new window.
c.new_instance_open_target = 'tab-silent'

## Which window to choose when opening links as new tabs. When
## `new_instance_open_target` is set to `window`, this is ignored.
## Type: String
## Valid values:
##   - first-opened: Open new tabs in the first (oldest) opened window.
##   - last-opened: Open new tabs in the last (newest) opened window.
##   - last-focused: Open new tabs in the most recently focused window.
##   - last-visible: Open new tabs in the most recently visible window.
c.new_instance_open_target_window = 'last-focused'

## Force a Qt platform to use. This sets the `QT_QPA_PLATFORM`
## environment variable and is useful to force using the XCB plugin when
## running QtWebEngine on Wayland.
## Type: String
{{- if eq .xdg_session_type "wayland" }}
c.qt.force_platform = "wayland"
{{- end }}

## Load a restored tab as soon as it takes focus.
## Type: Bool
c.session.lazy_restore = True

## Open new tabs (middleclick/ctrl+click) in the background.
## Type: Bool
c.tabs.background = True

## Padding (in pixels) around text for tabs.
## Type: Padding
c.tabs.padding = {'top': 2, 'bottom': 2, 'left': 5, 'right': 5}

## Position of the tab bar.
## Type: Position
## Valid values:
##   - top
##   - bottom
##   - left
##   - right
c.tabs.position = 'right'

## When to show the tab bar.
## Type: String
## Valid values:
##   - always: Always show the tab bar.
##   - never: Always hide the tab bar.
##   - multiple: Hide the tab bar if only one tab is open.
##   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'multiple'

## Width (in pixels or as percentage of the window) of the tab bar if
## it's vertical.
## Type: PercOrInt
c.tabs.width = 350

## Search engines which can be used via the address bar.  Maps a search
## engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
## placeholder. The placeholder will be replaced by the search term, use
## `{ {` and `} }` for literal `{`/`}` braces.  The following further
## placeholds are defined to configure how special characters in the
## search terms are replaced by safe characters (called 'quoting'):  *
## `{}` and `{semiquoted}` quote everything except slashes; this is the
## most   sensible choice for almost all search engines (for the search
## term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
## * `{quoted}` quotes all characters (for `slash/and&amp` this
## placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
## nothing (for `slash/and&amp` this placeholder   expands to
## `slash/and&amp`).  The search engine named `DEFAULT` is used when
## `url.auto_search` is turned on and something else than a URL was
## entered to be opened. Other search engines can be used by prepending
## the search engine name to the search term, e.g. `:open google
## qutebrowser`.
## Type: Dict
c.url.searchengines = {
    "DEFAULT": "https://kagi.com/search?q={}",
    "kagi": "https://kagi.com/search?q={}",
    "ddg": "https://duckduckgo.com/?q={}",
    "deb": "https://packages.debian.org/search?keywords={}&searchon=names&suite=all&section=all",
    "headers": "https://securityheaders.io/?q={}&hide=on&followRedirects=on",
    "sc": "https://github.com/koalaman/shellcheck/wiki/SC{}",
    "con": "https://contacts.google.com/u/0/search/{}",
    "nic": "https://www.nic.cz/whois/domain/{}/",
    "ssl": "https://www.ssllabs.com/ssltest/analyze.html?d={}&hideResults=on&latest",
    "fa": "https://fontawesome.com/icons?d=gallery&q={}",
    "mod": "http://docs.ansible.com/ansible/{}_module.html",
    "aur": "https://aur.archlinux.org/packages/?O=0&K={}",
    "archwiki": "https://wiki.archlinux.org/index.php?search={}&go=Go",
    "dnsviz": "https://dnsviz.net/d/{}/dnssec/",
}

config.source(
    "searchengines.py"
)

## Bindings for normal mode
config.bind(",c", "spawn --userscript org-store-link")
config.bind(";c", "hint links userscript org-store-link")
config.bind(",w", "spawn --userscript org-capture-web")
config.bind(";w", "hint links userscript org-capture-web")
config.bind(";T", "hint --rapid tickets tab")

config.bind("<Alt-H>", "tree-tab-promote")
config.bind("<Alt-J>", "tab-next")
config.bind("<Alt-K>", "tab-prev")
config.bind("<Alt-L>", "tree-tab-demote")
config.bind("pf", "spawn --userscript password_fill")
config.bind("sp", "spawn --userscript qutepocket")

config.bind(",n", "set content.user_stylesheets ~/.local/share/qutebrowser/night.css")
config.bind(",d", "config-unset content.user_stylesheets")

## Bindings for command mode
config.bind('<Ctrl-J>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-K>', 'completion-item-focus prev', mode='command')

# misc
config.bind(',q', 'spawn --userscript link2qr')

# MPV video
config.bind(",m", "spawn umpv {url}")
config.bind(",M", "hint links spawn umpv {hint-url}")
config.bind(";M", "hint --rapid links spawn umpv {hint-url}")
#+end_src

** Per-domain settings
In Qutebrowser you can made specific settings available only on specific
domains.

*** StyleSheets

*** My Home controls
I need to ignore =c= and =e= keys so I can pass-them through to Lovelace:

Waiting for https://github.com/qutebrowser/qutebrowser/issues/3636

# #+begin_src python
# with config.pattern('*://holly.reddwarf') as p:
#     p.unbind('e')
#     p.unbind('c')
# #+end_src

* Ideas
** TODO qurlshare
Looks interesting and I suppose it could be used from within Emacs too.
https://github.com/sim590/qurlshare

** TODO link2qr
https://plaindrops.de/blog/2019/qutebrowser-and-urls-as-qr-codes/

** TODO Kerberos
See: https://github.com/qutebrowser/qutebrowser/issues/4595#issuecomment-1555913182

#+begin_quote
For anyone wondering how to apply that option with the CLI: you must use
--qt-flag. It seems that qutebrowser handles args differently from the config.py
configuration and from the CLI.

=--qt-flag 'auth-server-whitelist=*.example.org'=
#+end_quote
